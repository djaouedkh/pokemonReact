{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Djaoued\\\\Desktop\\\\CodeDja\\\\pokemonReact\\\\src\\\\PrivateRoute.tsx\";\nimport React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport AuthenticationService from './services/authentication-service'; // component: c'est le composant qui se trouve dans chaque Route du Switch, ex: PokemonList\n// ...rest: un objet contenant les props de chaque Route du Switch, ex: {exact: true, path: '/'}\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PrivateRoute = _ref => {\n  let {\n    component: Component,\n    ...rest\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(Route, { ...rest,\n    render: props => {\n      const isAuthenticated = AuthenticationService.isAuthenticated; // on demande à notre service si l'user est connecté\n      // pas connecté\n\n      if (!isAuthenticated) {\n        return /*#__PURE__*/_jsxDEV(Redirect, {\n          to: {\n            pathname: '/login'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 12,\n          columnNumber: 20\n        }, this);\n      } // user connecté, on redirige vers le composant demandé\n\n\n      return /*#__PURE__*/_jsxDEV(Component, { ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 16\n      }, this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this);\n};\n\n_c = PrivateRoute;\nexport default PrivateRoute;\n\nvar _c;\n\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"names":["React","Route","Redirect","AuthenticationService","PrivateRoute","component","Component","rest","props","isAuthenticated","pathname"],"sources":["C:/Users/Djaoued/Desktop/CodeDja/pokemonReact/src/PrivateRoute.tsx"],"sourcesContent":["import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport AuthenticationService from './services/authentication-service';\r\n  \r\n// component: c'est le composant qui se trouve dans chaque Route du Switch, ex: PokemonList\r\n// ...rest: un objet contenant les props de chaque Route du Switch, ex: {exact: true, path: '/'}\r\nconst PrivateRoute = ({ component: Component, ...rest }: any) => (\r\n    <Route {...rest} render={(props) => {\r\n        const isAuthenticated = AuthenticationService.isAuthenticated; // on demande à notre service si l'user est connecté\r\n        // pas connecté\r\n        if (!isAuthenticated) {    \r\n            return <Redirect to={{ pathname: '/login' }} />\r\n        }\r\n  \r\n        // user connecté, on redirige vers le composant demandé\r\n        return <Component {...props} />\r\n    }} />\r\n);\r\n  \r\nexport default PrivateRoute;"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC;AACA,OAAOC,qBAAP,MAAkC,mCAAlC,C,CAEA;AACA;;;;AACA,MAAMC,YAAY,GAAG;EAAA,IAAC;IAAEC,SAAS,EAAEC,SAAb;IAAwB,GAAGC;EAA3B,CAAD;EAAA,oBACjB,QAAC,KAAD,OAAWA,IAAX;IAAiB,MAAM,EAAGC,KAAD,IAAW;MAChC,MAAMC,eAAe,GAAGN,qBAAqB,CAACM,eAA9C,CADgC,CAC+B;MAC/D;;MACA,IAAI,CAACA,eAAL,EAAsB;QAClB,oBAAO,QAAC,QAAD;UAAU,EAAE,EAAE;YAAEC,QAAQ,EAAE;UAAZ;QAAd;UAAA;UAAA;UAAA;QAAA,QAAP;MACH,CAL+B,CAOhC;;;MACA,oBAAO,QAAC,SAAD,OAAeF;MAAf;QAAA;QAAA;QAAA;MAAA,QAAP;IACH;EATD;IAAA;IAAA;IAAA;EAAA,QADiB;AAAA,CAArB;;KAAMJ,Y;AAaN,eAAeA,YAAf"},"metadata":{},"sourceType":"module"}