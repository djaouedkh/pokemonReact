{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport POKEMONS from '../models/mock-pokemon'; // hooks personnalisé: doit commencer par use.. et permet d'utiliser les hooks pr gerer les etats, on peut aussi ajouter des paramètre dans le hook perso use..(\"feu\") puis étant donnée qu c'est un hook perso alors on pour faire un traitement dedans et par exemple renvoyer les pokemons de type feu\n\nconst usePokemons = () => {\n  _s();\n\n  // HOOK d'état\n  // Etat initial \"didMount\"\n  const [pokemons, setPokemons] = useState([]); // Etat modifié \"didUpdate\", 2param(1,2) = 1: fonction qui modifie le composant avec comme argument la nouvelle valeur qui sera dynamique / 2: en passant un array vide cela permet d'eviter de déclencher  le hook d'effet à chaque modification du composant\n\n  useEffect(() => {\n    setPokemons(POKEMONS);\n  }, []);\n  return pokemons;\n};\n\n_s(usePokemons, \"HTV26hiVYObM9ZdttYFfm0Hoy8g=\");\n\nexport default usePokemons;","map":{"version":3,"names":["useState","useEffect","POKEMONS","usePokemons","pokemons","setPokemons"],"sources":["C:/Users/Djaoued/Desktop/CodeDja/pokemonReact/src/hooks/pokemon.hook.ts"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Pokemon from '../models/pokemon';\r\nimport POKEMONS from '../models/mock-pokemon';\r\n\r\n// hooks personnalisé: doit commencer par use.. et permet d'utiliser les hooks pr gerer les etats, on peut aussi ajouter des paramètre dans le hook perso use..(\"feu\") puis étant donnée qu c'est un hook perso alors on pour faire un traitement dedans et par exemple renvoyer les pokemons de type feu\r\nconst usePokemons = () => {\r\n    // HOOK d'état\r\n    // Etat initial \"didMount\"\r\n    const [pokemons, setPokemons] = useState<Pokemon[]>([]);\r\n\r\n    // Etat modifié \"didUpdate\", 2param(1,2) = 1: fonction qui modifie le composant avec comme argument la nouvelle valeur qui sera dynamique / 2: en passant un array vide cela permet d'eviter de déclencher  le hook d'effet à chaque modification du composant\r\n    useEffect(() => {\r\n        setPokemons(POKEMONS)\r\n    }, []);\r\n\r\n    return pokemons;\r\n}\r\n\r\nexport default usePokemons;"],"mappings":";;AAAA,SAAgBA,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAEA,OAAOC,QAAP,MAAqB,wBAArB,C,CAEA;;AACA,MAAMC,WAAW,GAAG,MAAM;EAAA;;EACtB;EACA;EACA,MAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BL,QAAQ,CAAY,EAAZ,CAAxC,CAHsB,CAKtB;;EACAC,SAAS,CAAC,MAAM;IACZI,WAAW,CAACH,QAAD,CAAX;EACH,CAFQ,EAEN,EAFM,CAAT;EAIA,OAAOE,QAAP;AACH,CAXD;;GAAMD,W;;AAaN,eAAeA,WAAf"},"metadata":{},"sourceType":"module"}