{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Djaoued\\\\Desktop\\\\CodeDja\\\\pokemonReact\\\\src\\\\App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport POKEMONS from './models/mock-pokemon'; // HOOKS\n// permet de gerer la valeur d'une variable dynamiquement et de gerer son cycle de vie\n// Condition d'utilisation: ne pas appeler un hooks dans une boucle ou if, doit se placer à la racine dans un composant de fonction uniquement, quand on utilise set.. la nouvelle valeur écrase l'ancienne ( si on veut ajouter alors il faut créer une nvlle donnée contenant l'ancienne + la new)\n// Cycle de vie d'un composant via ls hooks: \n//  - componentDidMount(): \"Montage\" methode appelée lors de la création du composant (lors de son insertion dans le DOM), permet de mettre en place des instruction lors de l'initialisation du composant, comme la recuperation de données depuis un serveur par exemple.\n//  - componentDidUpdate(prevProps, prevState): Quand react detect que les valeurs d'une propriété du composant sont modifiées, le composant est mis à jour. 2param(1, 2) 1: propriétés / 2: l'état avant la mise à jour\n//  - componentWillUnmount(): \"Démontage\": méthode appelée juste avant la destruction du composant suite à la navigation de l'utilisateur par exemple\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  // HOOK d'état\n  // Etat initial \"didMount\"\n  const [pokemons, setPokemons] = useState([]); // Pokemon: correspond à la classe Pokemon / [] état initiale: vide\n  // Etat modifié \"didUpdate\", 2param(1,2) = 1: fonction qui modifie le composant avec comme argument la nouvelle valeur qui sera dynamique / 2: en passant un array vide cela permet d'eviter de déclencher  le hook d'effet à chaque modification du composant\n\n  useEffect(() => {\n    setPokemons(POKEMONS);\n  }, []);\n\n  const showPokemonsCount = () => {\n    console.log(pokemons.length);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Pokedex\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Il y a \", pokemons.length, \" pokemons dans mon pokedex\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      onClick: showPokemonsCount,\n      children: \"Aficher\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this);\n};\n\n_s(App, \"HTV26hiVYObM9ZdttYFfm0Hoy8g=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","POKEMONS","App","pokemons","setPokemons","showPokemonsCount","console","log","length"],"sources":["C:/Users/Djaoued/Desktop/CodeDja/pokemonReact/src/App.tsx"],"sourcesContent":["import React, { FunctionComponent, useState, useEffect } from 'react';\r\nimport Pokemon from './models/pokemon';\r\nimport POKEMONS from './models/mock-pokemon';\r\n\r\n// HOOKS\r\n// permet de gerer la valeur d'une variable dynamiquement et de gerer son cycle de vie\r\n// Condition d'utilisation: ne pas appeler un hooks dans une boucle ou if, doit se placer à la racine dans un composant de fonction uniquement, quand on utilise set.. la nouvelle valeur écrase l'ancienne ( si on veut ajouter alors il faut créer une nvlle donnée contenant l'ancienne + la new)\r\n// Cycle de vie d'un composant via ls hooks: \r\n//  - componentDidMount(): \"Montage\" methode appelée lors de la création du composant (lors de son insertion dans le DOM), permet de mettre en place des instruction lors de l'initialisation du composant, comme la recuperation de données depuis un serveur par exemple.\r\n//  - componentDidUpdate(prevProps, prevState): Quand react detect que les valeurs d'une propriété du composant sont modifiées, le composant est mis à jour. 2param(1, 2) 1: propriétés / 2: l'état avant la mise à jour\r\n//  - componentWillUnmount(): \"Démontage\": méthode appelée juste avant la destruction du composant suite à la navigation de l'utilisateur par exemple\r\n\r\nconst App: FunctionComponent = () => {\r\n    // HOOK d'état\r\n    // Etat initial \"didMount\"\r\n    const [pokemons, setPokemons] = useState<Pokemon[]>([]); // Pokemon: correspond à la classe Pokemon / [] état initiale: vide\r\n\r\n    // Etat modifié \"didUpdate\", 2param(1,2) = 1: fonction qui modifie le composant avec comme argument la nouvelle valeur qui sera dynamique / 2: en passant un array vide cela permet d'eviter de déclencher  le hook d'effet à chaque modification du composant\r\n    useEffect(() => {\r\n        setPokemons(POKEMONS);\r\n    }, [])\r\n\r\n    const showPokemonsCount = () => {\r\n        console.log(pokemons.length);\r\n        \r\n    }\r\n\r\n    \r\n    return (\r\n        <div>\r\n            <h1>Pokedex</h1>\r\n            <p>Il y a {pokemons.length} pokemons dans mon pokedex</p>\r\n            <p onClick={showPokemonsCount}>Aficher</p>\r\n        </div>\r\n    )\r\n}\r\n  \r\nexport default App;"],"mappings":";;;AAAA,OAAOA,KAAP,IAAmCC,QAAnC,EAA6CC,SAA7C,QAA8D,OAA9D;AAEA,OAAOC,QAAP,MAAqB,uBAArB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAEA,MAAMC,GAAsB,GAAG,MAAM;EAAA;;EACjC;EACA;EACA,MAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BL,QAAQ,CAAY,EAAZ,CAAxC,CAHiC,CAGwB;EAEzD;;EACAC,SAAS,CAAC,MAAM;IACZI,WAAW,CAACH,QAAD,CAAX;EACH,CAFQ,EAEN,EAFM,CAAT;;EAIA,MAAMI,iBAAiB,GAAG,MAAM;IAC5BC,OAAO,CAACC,GAAR,CAAYJ,QAAQ,CAACK,MAArB;EAEH,CAHD;;EAMA,oBACI;IAAA,wBACI;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADJ,eAEI;MAAA,sBAAWL,QAAQ,CAACK,MAApB;IAAA;MAAA;MAAA;MAAA;IAAA,QAFJ,eAGI;MAAG,OAAO,EAAEH,iBAAZ;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAHJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAOH,CAvBD;;GAAMH,G;;KAAAA,G;AAyBN,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}