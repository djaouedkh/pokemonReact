{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Djaoued\\\\Desktop\\\\CodeDja\\\\pokemonReact\\\\src\\\\components\\\\pokemon-card.tsx\";\nimport React from 'react';\n// on importe la class pour verifier le type de l'argument quand recevra\nimport './pokemon-card.css'; // on indique à typescript que le composant qui utilisera le type Props devra posseder des props du meme nom et du mm type que défini, exemple la props doit se nommer pokemon et devra etre un objet de type Pokemon\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n// on passe au composant un argument et on utilisera cet argument pour extraire ses infos et les afficher\nconst PokemonCard = _ref => {\n  let {\n    pokemon\n  } = _ref;\n  // on indique que l'argument devra etre du type que l'on a définit plus haut\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"col s6 m4\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card horizontal\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-image\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: pokemon.picture,\n          alt: pokemon.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-stacked\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: pokemon.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 22,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: /*#__PURE__*/_jsxDEV(\"small\", {\n              children: pokemon.created.toString()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 23,\n              columnNumber: 20\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 23,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 9\n  }, this);\n};\n\n_c = PokemonCard;\nexport default PokemonCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"PokemonCard\");","map":{"version":3,"names":["React","PokemonCard","pokemon","picture","name","created","toString"],"sources":["C:/Users/Djaoued/Desktop/CodeDja/pokemonReact/src/components/pokemon-card.tsx"],"sourcesContent":["import React, { FunctionComponent } from 'react';\r\nimport Pokemon from '../models/pokemon'; // on importe la class pour verifier le type de l'argument quand recevra\r\nimport './pokemon-card.css'\r\n \r\n// on indique à typescript que le composant qui utilisera le type Props devra posseder des props du meme nom et du mm type que défini, exemple la props doit se nommer pokemon et devra etre un objet de type Pokemon\r\ntype Props = {\r\n    pokemon: Pokemon,\r\n    background?: string // ? permet de rendre cette props optionnel et donc notre composant n'est pas obligé de l'avoir\r\n};\r\n\r\n// on passe au composant un argument et on utilisera cet argument pour extraire ses infos et les afficher\r\n\r\nconst PokemonCard: FunctionComponent<Props> = ({pokemon}) => { // on indique que l'argument devra etre du type que l'on a définit plus haut\r\n    return (\r\n        <div className=\"col s6 m4\">\r\n            <div className=\"card horizontal\">\r\n            <div className=\"card-image\"> \r\n                <img src={pokemon.picture} alt={pokemon.name}/>\r\n            </div>\r\n            <div className=\"card-stacked\">\r\n                <div className=\"card-content\">\r\n                <p>{pokemon.name}</p>\r\n                <p><small>{pokemon.created.toString()}</small></p>\r\n                </div>\r\n            </div>\r\n            </div> \r\n        </div>\r\n    );\r\n}\r\n  \r\nexport default PokemonCard;"],"mappings":";AAAA,OAAOA,KAAP,MAAyC,OAAzC;AACyC;AACzC,OAAO,oBAAP,C,CAEA;;;;AAMA;AAEA,MAAMC,WAAqC,GAAG,QAAe;EAAA,IAAd;IAACC;EAAD,CAAc;EAAE;EAC3D,oBACI;IAAK,SAAS,EAAC,WAAf;IAAA,uBACI;MAAK,SAAS,EAAC,iBAAf;MAAA,wBACA;QAAK,SAAS,EAAC,YAAf;QAAA,uBACI;UAAK,GAAG,EAAEA,OAAO,CAACC,OAAlB;UAA2B,GAAG,EAAED,OAAO,CAACE;QAAxC;UAAA;UAAA;UAAA;QAAA;MADJ;QAAA;QAAA;QAAA;MAAA,QADA,eAIA;QAAK,SAAS,EAAC,cAAf;QAAA,uBACI;UAAK,SAAS,EAAC,cAAf;UAAA,wBACA;YAAA,UAAIF,OAAO,CAACE;UAAZ;YAAA;YAAA;YAAA;UAAA,QADA,eAEA;YAAA,uBAAG;cAAA,UAAQF,OAAO,CAACG,OAAR,CAAgBC,QAAhB;YAAR;cAAA;cAAA;cAAA;YAAA;UAAH;YAAA;YAAA;YAAA;UAAA,QAFA;QAAA;UAAA;UAAA;UAAA;QAAA;MADJ;QAAA;QAAA;QAAA;MAAA,QAJA;IAAA;MAAA;MAAA;MAAA;IAAA;EADJ;IAAA;IAAA;IAAA;EAAA,QADJ;AAeH,CAhBD;;KAAML,W;AAkBN,eAAeA,WAAf"},"metadata":{},"sourceType":"module"}