{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Djaoued\\\\Desktop\\\\CodeDja\\\\pokemonReact\\\\src\\\\App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n// HOOKS\n// permet de gerer la valeur d'une variable dynamiquement et de gerer son cycle de vie\n// Cycle de vie d'un composant via ls hooks: \n//  - componentDidMount(): \"Montage\" methode appelée lors de la création du composant (lors de son insertion dans le DOM), permet de mettre en place des instruction lors de l'initialisation du composant, comme la recuperation de données depuis un serveur par exemple.\n//  - componentDidUpdate(prevProps, prevState): Quand react detect que les valeurs d'une propriété du composant sont modifiées, le composant est mis à jour. 2param(1, 2) 1: propriétés / 2: l'état avant la mise à jour\n//  - componentWillUnmount(): \"Démontage\": méthode appelée juste avant la destruction du composant suite à la navigation de l'utilisateur par exemple\nconst App = () => {\n  _s();\n\n  // variable composé de son nom et de la fonction set.. qui permet de modifié sa valeur (optionnel) / <Pokemon[]> : Typage, c'est un array qui se nomme Pokemon (voir le fichier mock-pokemon)\n  const [pokemons, setPokemons] = useState([]); // Pokemon: correspond à la classe Pokemon / POKEMONS: la const qui contient la liste de tous les pokemons\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Pokedex\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Il y a \", pokemons.length, \" pokemons dans mon pokedex\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 9\n  }, this);\n};\n\n_s(App, \"yZDiRPVoUMSRlERsegdHszCe7+A=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","App","pokemons","setPokemons","length"],"sources":["C:/Users/Djaoued/Desktop/CodeDja/pokemonReact/src/App.tsx"],"sourcesContent":["import React, { FunctionComponent, useState, useEffect } from 'react';\r\nimport Pokemon from './models/pokemon';\r\nimport POKEMONS from './models/mock-pokemon';\r\n\r\n// HOOKS\r\n// permet de gerer la valeur d'une variable dynamiquement et de gerer son cycle de vie\r\n// Cycle de vie d'un composant via ls hooks: \r\n//  - componentDidMount(): \"Montage\" methode appelée lors de la création du composant (lors de son insertion dans le DOM), permet de mettre en place des instruction lors de l'initialisation du composant, comme la recuperation de données depuis un serveur par exemple.\r\n//  - componentDidUpdate(prevProps, prevState): Quand react detect que les valeurs d'une propriété du composant sont modifiées, le composant est mis à jour. 2param(1, 2) 1: propriétés / 2: l'état avant la mise à jour\r\n//  - componentWillUnmount(): \"Démontage\": méthode appelée juste avant la destruction du composant suite à la navigation de l'utilisateur par exemple\r\n\r\nconst App: FunctionComponent = () => {\r\n    // variable composé de son nom et de la fonction set.. qui permet de modifié sa valeur (optionnel) / <Pokemon[]> : Typage, c'est un array qui se nomme Pokemon (voir le fichier mock-pokemon)\r\n    const [pokemons, setPokemons] = useState<Pokemon[]>([]); // Pokemon: correspond à la classe Pokemon / POKEMONS: la const qui contient la liste de tous les pokemons\r\n\r\n    return (\r\n        <div>\r\n            <h1>Pokedex</h1>\r\n            <p>Il y a {pokemons.length} pokemons dans mon pokedex</p>\r\n        </div>\r\n    )\r\n}\r\n  \r\nexport default App;"],"mappings":";;;AAAA,OAAOA,KAAP,IAAmCC,QAAnC,QAA8D,OAA9D;;;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMC,GAAsB,GAAG,MAAM;EAAA;;EACjC;EACA,MAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BH,QAAQ,CAAY,EAAZ,CAAxC,CAFiC,CAEwB;;EAEzD,oBACI;IAAA,wBACI;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADJ,eAEI;MAAA,sBAAWE,QAAQ,CAACE,MAApB;IAAA;MAAA;MAAA;MAAA;IAAA,QAFJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAMH,CAVD;;GAAMH,G;;KAAAA,G;AAYN,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}