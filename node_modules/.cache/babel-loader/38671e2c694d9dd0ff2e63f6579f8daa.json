{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Djaoued\\\\Desktop\\\\CodeDja\\\\pokemonReact\\\\src\\\\PrivateRoute.tsx\";\nimport React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport AuthenticationService from './services/authentication-service'; // component: c'est le composant qui se trouve dans chaque Route du Switch, ex: PokemonList\n// ...rest: objet contenant les props de chaque Route du Switch, ex: {exact: true, path: '/'}\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PrivateRoute = _ref => {\n  let {\n    component: Component,\n    ...rest\n  } = _ref;\n  return (\n    /*#__PURE__*/\n    // render: fonction qui permet de checker si user connecté et auquel cas de return le composant ou de rediriger vers login\n    _jsxDEV(Route, { ...rest,\n      render: props => {\n        const isAuthenticated = AuthenticationService.isAuthenticated; // on demande à notre service si l'user est connecté\n        // pas connecté\n\n        if (!isAuthenticated) {\n          return /*#__PURE__*/_jsxDEV(Redirect, {\n            to: {\n              pathname: '/login'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 13,\n            columnNumber: 20\n          }, this);\n        } // user connecté, on redirige vers le composant demandé\n\n\n        return /*#__PURE__*/_jsxDEV(Component, { ...props\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 16\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 5\n    }, this)\n  );\n};\n\n_c = PrivateRoute;\nexport default PrivateRoute;\n\nvar _c;\n\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"names":["React","Route","Redirect","AuthenticationService","PrivateRoute","component","Component","rest","props","isAuthenticated","pathname"],"sources":["C:/Users/Djaoued/Desktop/CodeDja/pokemonReact/src/PrivateRoute.tsx"],"sourcesContent":["import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport AuthenticationService from './services/authentication-service';\r\n  \r\n// component: c'est le composant qui se trouve dans chaque Route du Switch, ex: PokemonList\r\n// ...rest: objet contenant les props de chaque Route du Switch, ex: {exact: true, path: '/'}\r\nconst PrivateRoute = ({ component: Component, ...rest }: any) => (\r\n    // render: fonction qui permet de checker si user connecté et auquel cas de return le composant ou de rediriger vers login\r\n    <Route {...rest} render={(props) => {\r\n        const isAuthenticated = AuthenticationService.isAuthenticated; // on demande à notre service si l'user est connecté\r\n        // pas connecté\r\n        if (!isAuthenticated) {    \r\n            return <Redirect to={{ pathname: '/login' }} />\r\n        }\r\n  \r\n        // user connecté, on redirige vers le composant demandé\r\n        return <Component {...props} />\r\n    }} />\r\n);\r\n  \r\nexport default PrivateRoute;"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC;AACA,OAAOC,qBAAP,MAAkC,mCAAlC,C,CAEA;AACA;;;;AACA,MAAMC,YAAY,GAAG;EAAA,IAAC;IAAEC,SAAS,EAAEC,SAAb;IAAwB,GAAGC;EAA3B,CAAD;EAAA;IAAA;IACjB;IACA,QAAC,KAAD,OAAWA,IAAX;MAAiB,MAAM,EAAGC,KAAD,IAAW;QAChC,MAAMC,eAAe,GAAGN,qBAAqB,CAACM,eAA9C,CADgC,CAC+B;QAC/D;;QACA,IAAI,CAACA,eAAL,EAAsB;UAClB,oBAAO,QAAC,QAAD;YAAU,EAAE,EAAE;cAAEC,QAAQ,EAAE;YAAZ;UAAd;YAAA;YAAA;YAAA;UAAA,QAAP;QACH,CAL+B,CAOhC;;;QACA,oBAAO,QAAC,SAAD,OAAeF;QAAf;UAAA;UAAA;UAAA;QAAA,QAAP;MACH;IATD;MAAA;MAAA;MAAA;IAAA;EAFiB;AAAA,CAArB;;KAAMJ,Y;AAcN,eAAeA,YAAf"},"metadata":{},"sourceType":"module"}